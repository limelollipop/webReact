{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bys\\\\Desktop\\\\000 \\uAE30\\uC5C5\\uD615\\uB808\\uC774\\uC544\\uC6C3 react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 아래는 비구조화 할당 useState(초기값세팅);\n  const [time, setTime] = useState(3);\n\n  /*\n  useState 사용방법\n  1. react로부터 import한다\n  2. 비구조화 할당으로 useState를 선언한다.\n  이때 const [결과값(배열값), set 함수(결과값을 변경할 수 있는 유일한 함수)] = useState(초기값);\n  3. 변화되는 지점에 결과값의 변수를 지정하고, 랜더링이 일어나야할 지점에 set 함수를 설정해서 특정 이벤트가 발생하면 set 함수를 발동해서 결과값을 변화시키고 그 변화를 인지한 리액트는 화면을 재 랜더링하여 업데이트 한다\n  */\n\n  function UpTime() {\n    setTime(time + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"\\uD604\\uC7AC \\uC2DC\\uAC01 : \", time, \"\\uC2DC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: UpTime,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"i3ZGVfBbX71sDi4NFIY2+OKq4N4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","time","setTime","UpTime"],"sources":["C:/Users/bys/Desktop/000 기업형레이아웃 react/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction App() {\n\t// 아래는 비구조화 할당 useState(초기값세팅);\n\tconst [time, setTime] = useState(3);\n\n\t/*\nuseState 사용방법\n1. react로부터 import한다\n2. 비구조화 할당으로 useState를 선언한다.\n\t이때 const [결과값(배열값), set 함수(결과값을 변경할 수 있는 유일한 함수)] = useState(초기값);\n3. 변화되는 지점에 결과값의 변수를 지정하고, 랜더링이 일어나야할 지점에 set 함수를 설정해서 특정 이벤트가 발생하면 set 함수를 발동해서 결과값을 변화시키고 그 변화를 인지한 리액트는 화면을 재 랜더링하여 업데이트 한다\n*/\n\n\tfunction UpTime() {\n\t\tsetTime(time + 1);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<span>현재 시각 : {time}시</span>\n\t\t\t<button onClick={UpTime}>Update</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,GAAG,GAAG;EAAA;EACd;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;;EAEnC;AACD;AACA;AACA;AACA;AACA;AACA;;EAEC,SAASI,MAAM,GAAG;IACjBD,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;EAClB;EAEA,oBACC;IAAA,wBACC;MAAA,2CAAeA,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS,eAC5B;MAAQ,OAAO,EAAEE,MAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AAER;AAAC,GAtBQH,GAAG;AAAA,KAAHA,GAAG;AAwBZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}