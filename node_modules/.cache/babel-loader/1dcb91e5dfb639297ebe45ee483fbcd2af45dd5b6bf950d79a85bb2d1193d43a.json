{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bys\\\\Desktop\\\\000 \\uAE30\\uC5C5\\uD615\\uB808\\uC774\\uC544\\uC6C3 react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [count, setCount] = useState(1);\n  const [name, setName] = useState('');\n  function update() {\n    setCount(count + 1);\n  }\n  useEffect(() => {\n    console.log('랜더링이 되었답니다');\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"count : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: update,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"e7zPXMHGBAmRrWXS/0TR08rruUo=\");\n_c = App;\nexport default App;\n/*\nuseEffect(()=>{작업});\n하나의 매개변수로 콜백함수 하나만 받는경우\n→ 매 랜더링이 될 때마다 작업이 실행된다\n\nuseEffect(()=>{\t작업}, []);\n두개의 매개변수로 콜백함수와 배열(dependency array)를 받는 경우\n→ 처음 랜더링 될 때만 실행함\n만약 디펜던시어레이가 빈배열이라면?\n→ 디펜던시어레이 값이 업데이트 될 때무다 작업이 실행된다\n\n\n알아만 두기\nuseEffect(()=>{\n\t작업\n\t\treturn (\n\t\t\t클린업 함수 → 정리하는 작업, 언마운트 될 때 사용함\n\t\t);\n\t}, {input});\n\t콜백함수 안에 리턴으로 클린업 함수가 있는 경우\n\t→ 해당 작업이 끝나고, return안의 클린업 함수가 실행하면서 언마운트 시킴\n*/\n\n//--------------------------------------------\n// import { useState } from 'react';\n\n// function App() {\n// \t// 아래는 비구조화 할당 useState(초기값세팅);\n// \tconst [time, setTime] = useState(3);\n\n// \t/*\n// useState 사용방법\n// 1. react로부터 import한다\n// 2. 비구조화 할당으로 useState를 선언한다.\n// \t이때 const [결과값(배열값), set 함수(결과값을 변경할 수 있는 유일한 함수)] = useState(초기값);\n// 3. 변화되는 지점에 결과값의 변수를 지정하고, 랜더링이 일어나야할 지점에 set 함수를 설정해서 특정 이벤트가 발생하면 set 함수를 발동해서 결과값을 변화시키고 그 변화를 인지한 리액트는 화면을 재 랜더링하여 업데이트 한다\n// */\n\n// \tfunction UpTime() {\n// \t\tsetTime(time + 1);\n// \t}\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<span>현재 시각 : {time}시</span>\n// \t\t\t<button onClick={UpTime}>Update</button>\n// \t\t</div>\n// \t);\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","App","count","setCount","name","setName","update","console","log"],"sources":["C:/Users/bys/Desktop/000 기업형레이아웃 react/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction App() {\n\tconst [count, setCount] = useState(1);\n\tconst [name, setName] = useState('');\n\tfunction update() {\n\t\tsetCount(count + 1);\n\t}\n\tuseEffect(() => {\n\t\tconsole.log('랜더링이 되었답니다');\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<span>count : {count}</span>\n\t\t\t<button onClick={update}>Update</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n/*\nuseEffect(()=>{작업});\n하나의 매개변수로 콜백함수 하나만 받는경우\n→ 매 랜더링이 될 때마다 작업이 실행된다\n\nuseEffect(()=>{\t작업}, []);\n두개의 매개변수로 콜백함수와 배열(dependency array)를 받는 경우\n→ 처음 랜더링 될 때만 실행함\n만약 디펜던시어레이가 빈배열이라면?\n→ 디펜던시어레이 값이 업데이트 될 때무다 작업이 실행된다\n\n\n알아만 두기\nuseEffect(()=>{\n\t작업\n\t\treturn (\n\t\t\t클린업 함수 → 정리하는 작업, 언마운트 될 때 사용함\n\t\t);\n\t}, {input});\n\t콜백함수 안에 리턴으로 클린업 함수가 있는 경우\n\t→ 해당 작업이 끝나고, return안의 클린업 함수가 실행하면서 언마운트 시킴\n*/\n\n//--------------------------------------------\n// import { useState } from 'react';\n\n// function App() {\n// \t// 아래는 비구조화 할당 useState(초기값세팅);\n// \tconst [time, setTime] = useState(3);\n\n// \t/*\n// useState 사용방법\n// 1. react로부터 import한다\n// 2. 비구조화 할당으로 useState를 선언한다.\n// \t이때 const [결과값(배열값), set 함수(결과값을 변경할 수 있는 유일한 함수)] = useState(초기값);\n// 3. 변화되는 지점에 결과값의 변수를 지정하고, 랜더링이 일어나야할 지점에 set 함수를 설정해서 특정 이벤트가 발생하면 set 함수를 발동해서 결과값을 변화시키고 그 변화를 인지한 리액트는 화면을 재 랜더링하여 업데이트 한다\n// */\n\n// \tfunction UpTime() {\n// \t\tsetTime(time + 1);\n// \t}\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<span>현재 시각 : {time}시</span>\n// \t\t\t<button onClick={UpTime}>Update</button>\n// \t\t</div>\n// \t);\n// }\n\n// export default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,SAASC,GAAG,GAAG;EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,SAASM,MAAM,GAAG;IACjBH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACpB;EACAH,SAAS,CAAC,MAAM;IACfQ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC1B,CAAC,CAAC;EAEF,oBACC;IAAA,wBACC;MAAA,uBAAeN,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC5B;MAAQ,OAAO,EAAEI,MAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AAER;AAAC,GAhBQL,GAAG;AAAA,KAAHA,GAAG;AAkBZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}