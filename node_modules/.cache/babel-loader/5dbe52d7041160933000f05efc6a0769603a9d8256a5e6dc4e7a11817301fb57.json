{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bys\\\\Desktop\\\\000 \\uAE30\\uC5C5\\uD615\\uB808\\uC774\\uC544\\uC6C3 react\\\\src\\\\App.js\";\nimport './scss/style.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const box = {\n    width: 100,\n    height: 100,\n    backgroundColor: 'gray',\n    margin: 50\n  }; // 배열은 성격이 같은 애들을 묶어둔 것, 객체는 성격이 다른 애들을 한 가지의 주제로 묶은 것\n\n  const circle = {\n    width: 200,\n    height: 200,\n    borderRadius: '50%',\n    backgroundColor: '#eee',\n    margin: 20\n  };\n\n  /* 해당함수를 외부에서 만들어서 retun안에 대입\n  \tonClick이란 이벤트는 화살표함수()=>{} 로 받는다\n  */\n  const changeBg = (e, color) => {\n    e.target.style.backgroundColor = color;\n  };\n  const chageBorder = (e, border) => {\n    e.target.style.borderRadius = border;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"article\", {\n      style: circle,\n      onClick: e => {\n        chageBorder(e, '0%');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      style: box,\n      onClick: e => {\n        changeBg(e, 'hotpink');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      style: box,\n      onClick: e => {\n        changeBg(e, 'lightSkyBlue');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      style: box,\n      onClick: e => {\n        changeBg(e, 'green');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      style: box,\n      onClick: e => {\n        changeBg(e, 'yellow');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this);\n}\n_c = App;\nexport default App;\n\n/*\n이벤트 객체란\nDOM과 관련된 이벤트가 발생하면 관련된 정보는 모두 event 객체에 저장됨\n이벤트 발생요소/타입 등 관련된 데이터가 만들어지고 \n이것을 사용할 때 첫번째 매개변수를 명시적으로 선언해야한다\n\n이벤트 객체 동적으로 생성되어 이벤트 핸들러에 인자로 전달됨\n명시적으로 선언해줘야 한다\n------------------------------------\n\nonClick 이벤트란\n리액트는 onClick이고 js는 onclick\n리액트는 js문법을 사용하므로 {}를 사용해야하고, js는 \"\"문자열로 해당 함수나 값을 받기만 하면된다\n리액트의 onClick이벤트는 오직 하나의 함수만 받을 수 있다. 반면 js의 onclick은 여러개의 함수를 받을 수 있다\n*/\n\n/*\n가상DOM과 리얼DOM\n쿼리셀렉터는 리액터에서는 '제한'\ndocument.querySelector는 사용 하면 안 됨\n왜냐면 가상돔으로 만든 요소들은 리얼돔에서 사용하는 document.querySelector는 이미 리얼돔으로 진행된 상태를 의미\n\n리액트는 가상돔에서 요소를 만들고 이전 돔과 비교해서 변화된 내용을 리얼돔으로 구현하는 시스템이기때문에 document를 사용하면 충돌의 위험성이 아주 크다\n\n쿼리셀렉터는 사용해도 되는가?\n쿼리셀렉터는 대상을 참조한다는 뜻이다\n우선 리액트에서는 대상을 참조하는 훅이 존재 → useRef\n그래서 리액트에서는 대상을 참조할 때 useRef를 추천\n\n→ 리액트 생명주기때문에 querySelector와 useRef를 각각 사용할 때가 있음\n\t쿼리셀렉터는 참조방법이 리액트의 구성과 맞지않아 비추천\n\n\tuseRef의 경우 언마운트 되어야하는 대상을 참조할 경우 언마운트가 안 됨\n\n☆ 보통은 useRef를 사용하여 대상을 참조하고, 특별한 경우(생명주기와 연관된)에만 쿼리셀렉터를 사용한다\n\t*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","box","width","height","backgroundColor","margin","circle","borderRadius","changeBg","e","color","target","style","chageBorder","border"],"sources":["C:/Users/bys/Desktop/000 기업형레이아웃 react/src/App.js"],"sourcesContent":["import './scss/style.scss';\n\nfunction App() {\n\tconst box = {\n\t\twidth: 100,\n\t\theight: 100,\n\t\tbackgroundColor: 'gray',\n\t\tmargin: 50,\n\t}; // 배열은 성격이 같은 애들을 묶어둔 것, 객체는 성격이 다른 애들을 한 가지의 주제로 묶은 것\n\n\tconst circle = {\n\t\twidth: 200,\n\t\theight: 200,\n\t\tborderRadius: '50%',\n\t\tbackgroundColor: '#eee',\n\t\tmargin: 20,\n\t};\n\n\t/* 해당함수를 외부에서 만들어서 retun안에 대입\n\t\tonClick이란 이벤트는 화살표함수()=>{} 로 받는다\n\t*/\n\tconst changeBg = (e, color) => {\n\t\te.target.style.backgroundColor = color;\n\t};\n\tconst chageBorder = (e, border) => {\n\t\te.target.style.borderRadius = border;\n\t};\n\n\treturn (\n\t\t<div className='wrap'>\n\t\t\t<article\n\t\t\t\tstyle={circle}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tchageBorder(e, '0%');\n\t\t\t\t}}\n\t\t\t></article>\n\n\t\t\t<article\n\t\t\t\tstyle={box}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tchangeBg(e, 'hotpink');\n\t\t\t\t}}\n\t\t\t></article>\n\n\t\t\t<article\n\t\t\t\tstyle={box}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tchangeBg(e, 'lightSkyBlue');\n\t\t\t\t}}\n\t\t\t></article>\n\n\t\t\t{/* <article style={box} onClick={(e) => {changeBg(e, 'green')}}></article> */}\n\t\t\t<article\n\t\t\t\tstyle={box}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tchangeBg(e, 'green');\n\t\t\t\t}}\n\t\t\t></article>\n\t\t\t<article\n\t\t\t\tstyle={box}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tchangeBg(e, 'yellow');\n\t\t\t\t}}\n\t\t\t></article>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/*\n이벤트 객체란\nDOM과 관련된 이벤트가 발생하면 관련된 정보는 모두 event 객체에 저장됨\n이벤트 발생요소/타입 등 관련된 데이터가 만들어지고 \n이것을 사용할 때 첫번째 매개변수를 명시적으로 선언해야한다\n\n이벤트 객체 동적으로 생성되어 이벤트 핸들러에 인자로 전달됨\n명시적으로 선언해줘야 한다\n------------------------------------\n\nonClick 이벤트란\n리액트는 onClick이고 js는 onclick\n리액트는 js문법을 사용하므로 {}를 사용해야하고, js는 \"\"문자열로 해당 함수나 값을 받기만 하면된다\n리액트의 onClick이벤트는 오직 하나의 함수만 받을 수 있다. 반면 js의 onclick은 여러개의 함수를 받을 수 있다\n*/\n\n/*\n가상DOM과 리얼DOM\n쿼리셀렉터는 리액터에서는 '제한'\ndocument.querySelector는 사용 하면 안 됨\n왜냐면 가상돔으로 만든 요소들은 리얼돔에서 사용하는 document.querySelector는 이미 리얼돔으로 진행된 상태를 의미\n\n리액트는 가상돔에서 요소를 만들고 이전 돔과 비교해서 변화된 내용을 리얼돔으로 구현하는 시스템이기때문에 document를 사용하면 충돌의 위험성이 아주 크다\n\n쿼리셀렉터는 사용해도 되는가?\n쿼리셀렉터는 대상을 참조한다는 뜻이다\n우선 리액트에서는 대상을 참조하는 훅이 존재 → useRef\n그래서 리액트에서는 대상을 참조할 때 useRef를 추천\n\n→ 리액트 생명주기때문에 querySelector와 useRef를 각각 사용할 때가 있음\n\t쿼리셀렉터는 참조방법이 리액트의 구성과 맞지않아 비추천\n\n\tuseRef의 경우 언마운트 되어야하는 대상을 참조할 경우 언마운트가 안 됨\n\n☆ 보통은 useRef를 사용하여 대상을 참조하고, 특별한 경우(생명주기와 연관된)에만 쿼리셀렉터를 사용한다\n\t*/\n"],"mappings":";AAAA,OAAO,mBAAmB;AAAC;AAE3B,SAASA,GAAG,GAAG;EACd,MAAMC,GAAG,GAAG;IACXC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,eAAe,EAAE,MAAM;IACvBC,MAAM,EAAE;EACT,CAAC,CAAC,CAAC;;EAEH,MAAMC,MAAM,GAAG;IACdJ,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXI,YAAY,EAAE,KAAK;IACnBH,eAAe,EAAE,MAAM;IACvBC,MAAM,EAAE;EACT,CAAC;;EAED;AACD;AACA;EACC,MAAMG,QAAQ,GAAG,CAACC,CAAC,EAAEC,KAAK,KAAK;IAC9BD,CAAC,CAACE,MAAM,CAACC,KAAK,CAACR,eAAe,GAAGM,KAAK;EACvC,CAAC;EACD,MAAMG,WAAW,GAAG,CAACJ,CAAC,EAAEK,MAAM,KAAK;IAClCL,CAAC,CAACE,MAAM,CAACC,KAAK,CAACL,YAAY,GAAGO,MAAM;EACrC,CAAC;EAED,oBACC;IAAK,SAAS,EAAC,MAAM;IAAA,wBACpB;MACC,KAAK,EAAER,MAAO;MACd,OAAO,EAAGG,CAAC,IAAK;QACfI,WAAW,CAACJ,CAAC,EAAE,IAAI,CAAC;MACrB;IAAE;MAAA;MAAA;MAAA;IAAA,QACQ,eAEX;MACC,KAAK,EAAER,GAAI;MACX,OAAO,EAAGQ,CAAC,IAAK;QACfD,QAAQ,CAACC,CAAC,EAAE,SAAS,CAAC;MACvB;IAAE;MAAA;MAAA;MAAA;IAAA,QACQ,eAEX;MACC,KAAK,EAAER,GAAI;MACX,OAAO,EAAGQ,CAAC,IAAK;QACfD,QAAQ,CAACC,CAAC,EAAE,cAAc,CAAC;MAC5B;IAAE;MAAA;MAAA;MAAA;IAAA,QACQ,eAGX;MACC,KAAK,EAAER,GAAI;MACX,OAAO,EAAGQ,CAAC,IAAK;QACfD,QAAQ,CAACC,CAAC,EAAE,OAAO,CAAC;MACrB;IAAE;MAAA;MAAA;MAAA;IAAA,QACQ,eACX;MACC,KAAK,EAAER,GAAI;MACX,OAAO,EAAGQ,CAAC,IAAK;QACfD,QAAQ,CAACC,CAAC,EAAE,QAAQ,CAAC;MACtB;IAAE;MAAA;MAAA;MAAA;IAAA,QACQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACN;AAER;AAAC,KAhEQT,GAAG;AAkEZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}